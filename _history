{"entries":[{"timestamp":1729088123374,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" id=\"H$!tvWi:GpJvB_0;bnhw\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever"],[0,"\"></"]],"start1":12,"start2":12,"length1":137,"length2":102},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"microphone"],[1,"radio"],[0,"\": \""]],"start1":117,"start2":117,"length1":18,"length2":13},{"diffs":[[0,"   \""],[-1,"bluetooth"],[1,"microphone"],[0,"\": \""]],"start1":139,"start2":139,"length1":17,"length2":18},{"diffs":[[0,".md\""],[-1,",\n        \"createai.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":112,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"createai.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n\n/**\n * CreateAI Streaming Blocks\n */\n//% weight=119 color=#2b64c3 icon=\"\\uf1d8\"\nnamespace CreateAI {\n    //% block=\"Show Bluetooth ID\"\n    export function showPairingHistogram(): void {\n        let n = control.deviceSerialNumber() >>> 0\n        let ld = 1\n        let d = 5\n        let h;\n        basic.clearScreen()\n        for (let i = 0; i < 5; i++) {\n            h = Math.idiv(n % d, ld)\n            serial.writeLine(h.toString())\n            n += 0 - h\n            d *= 5;\n            ld *= 5;\n            for (let j = 0; j < h + 1; j++) {\n                led.plotBrightness(5 - i - 1, 5 - j - 1, 255)\n            }\n        }\n    }\n    const DELIM_SYMBOL = \"#\"\n    let is_setup = false\n    const BUILD_NUMBER = 1; // Updated manually for each change added.\n\n    //% block=\"setup as input micro:bit\"\n    export function requireSetup(): void {\n        if (is_setup) {\n            return\n        }\n        is_setup = true\n        bluetooth.setTransmitPower(7);\n        bluetooth.startUartService();\n        bluetooth.startAccelerometerService();\n        bluetooth.startButtonService();\n        bluetooth.startIOPinService();\n        bluetooth.startLEDService();\n\n        // Map to an action, it may not be gestures recognized\n        bluetooth.onUartDataReceived(DELIM_SYMBOL, handleUartInput);\n        bluetooth.onBluetoothConnected(handleBluetoothConnect)\n        bluetooth.onBluetoothDisconnected(handleBluetoothDisconnect)\n        showPairingHistogram()\n    }\n\n    function handleBluetoothConnect(): void {\n        pause(2000)\n        for (let i = 0; i < 10; i++) {\n            pause(800)\n            bluetooth.uartWriteString(\"id_mkcd\") // Identify as makecode hex\n            bluetooth.uartWriteString(\"vi_\" + BUILD_NUMBER)\n        }\n    }\n\n    function handleBluetoothDisconnect(): void {\n        showPairingHistogram();\n    }\n\n    function handleUartInput(): void {\n        const uartInput = bluetooth.uartReadUntil(DELIM_SYMBOL)\n        const prefix = uartInput.substr(0, 2);\n        const input = uartInput.substr(2);\n        if (prefix === \"g_\") {\n            // Gesture recognition\n        }\n        if (prefix === \"s_\") {\n            // System messages\n            handleSystemInputs(input);\n        }\n    }\n    function handleSystemInputs(input: string): void {\n        if (input === \"connected\") {\n            bluetooth.uartWriteLine(\"hello world\");\n        }\n    }\n\n}\n"}]}],"snapshots":[{"timestamp":1729088123373,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"createai-input-microbit-mode\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1729088645497}